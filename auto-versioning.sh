#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä—Å–∏–π –Ω–∞ GitHub
# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å —á–µ—Ä–µ–∑ cron

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_NAME="FlatcherSite"
GITHUB_REPO="your-username/FlatcherSite"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
BACKUP_DIR="./auto-backups"
LOG_FILE="./auto-versioning.log"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
mkdir -p $BACKUP_DIR

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_message() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message" | tee -a $LOG_FILE
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
check_for_changes() {
    log_message "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏..."
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    git fetch origin
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã
    local local_commit=$(git rev-parse HEAD)
    local remote_commit=$(git rev-parse origin/main)
    
    if [ "$local_commit" != "$remote_commit" ]; then
        log_message "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        return 0
    else
        log_message "‚ÑπÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏
create_auto_version() {
    local timestamp=$(date '+%Y%m%d_%H%M')
    local auto_version="auto-v1.1.1-$timestamp"
    
    log_message "üè∑Ô∏è  –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é: $auto_version"
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É
    git checkout main
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    git pull origin main
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
    git tag $auto_version
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–≥ –Ω–∞ GitHub
    git push origin $auto_version
    
    log_message "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è $auto_version —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ GitHub"
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏
    create_auto_backup $auto_version
    
    return $auto_version
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞
create_auto_backup() {
    local version=$1
    local timestamp=$(date '+%Y%m%d_%H%M')
    
    log_message "üíæ –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –≤–µ—Ä—Å–∏–∏ $version"
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –≤–µ—Ä—Å–∏–∏
    git archive --format=tar --prefix="$version/" $version | \
    gzip > "$BACKUP_DIR/${version}_${timestamp}.tar.gz"
    
    log_message "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${version}_${timestamp}.tar.gz"
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24)
cleanup_old_backups() {
    log_message "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã..."
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24
    ls -t $BACKUP_DIR/auto-v*.tar.gz 2>/dev/null | tail -n +25 | xargs -r rm
    
    log_message "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ä—Å–∏–∏
create_release_version() {
    local current_version=$(grep '"version"' package.json | cut -d'"' -f4)
    local new_version="v$current_version"
    
    log_message "üöÄ –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑–Ω—É—é –≤–µ—Ä—Å–∏—é: $new_version"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
    git tag $new_version
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–≥ –Ω–∞ GitHub
    git push origin $new_version
    
    log_message "‚úÖ –†–µ–ª–∏–∑–Ω–∞—è –≤–µ—Ä—Å–∏—è $new_version —Å–æ–∑–¥–∞–Ω–∞"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ package.json –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞
    update_package_version
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ package.json
update_package_version() {
    local current_version=$(grep '"version"' package.json | cut -d'"' -f4)
    local major=$(echo $current_version | cut -d'.' -f1)
    local minor=$(echo $current_version | cut -d'.' -f2)
    local patch=$(echo $current_version | cut -d'.' -f3)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º patch –≤–µ—Ä—Å–∏—é
    local new_patch=$((patch + 1))
    local new_version="$major.$minor.$new_patch"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º package.json
    sed -i '' "s/\"version\": \"$current_version\"/\"version\": \"$new_version\"/" package.json
    
    # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    git add package.json
    git commit -m "Auto-increment version to $new_version"
    git push origin main
    
    log_message "üìù –í–µ—Ä—Å–∏—è –≤ package.json –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ $new_version"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è GitHub Release
create_github_release() {
    local version=$1
    local release_notes="## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑ $version\n\n- –°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n- –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: $(date)\n- –ö–æ–º–º–∏—Ç: $(git rev-parse --short HEAD)"
    
    log_message "üì¶ –°–æ–∑–¥–∞–µ–º GitHub Release –¥–ª—è –≤–µ—Ä—Å–∏–∏ $version"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub CLI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞
    if command -v gh &> /dev/null; then
        gh release create $version --title "Release $version" --notes "$release_notes"
        log_message "‚úÖ GitHub Release —Å–æ–∑–¥–∞–Ω"
    else
        log_message "‚ö†Ô∏è  GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ä–µ–ª–∏–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_message "üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä—Å–∏–π"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        log_message "‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if check_for_changes; then
        # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é
        auto_version=$(create_auto_version)
        
        # –°–æ–∑–¥–∞–µ–º GitHub Release
        create_github_release $auto_version
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
        cleanup_old_backups
        
        log_message "üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
    else
        log_message "‚ÑπÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –≤–µ—Ä—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è"
    fi
    
    log_message "‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
